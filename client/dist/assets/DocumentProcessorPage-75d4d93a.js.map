{"version":3,"file":"DocumentProcessorPage-75d4d93a.js","sources":["../../src/pages/app/processor/DocumentProcessorPage.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { z } from 'zod';\r\n\r\nimport { Card, CardContent } from '@/components/ui/Card';\r\nimport Button from '@/components/ui/Button';\r\nimport { processorService, flashcardService } from '@/services';\r\nimport { ProcessedFlashcard } from '@/types/processor';\r\n\r\nconst MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB\r\nconst ACCEPTED_FILE_TYPES = [\r\n  'application/pdf',\r\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n  'application/msword',\r\n  'text/plain',\r\n];\r\n\r\nconst documentProcessSchema = z.object({\r\n  title: z.string().min(1, 'Title is required'),\r\n  maxCards: z.number().int().min(5).max(100),\r\n  includeImages: z.boolean().default(false),\r\n  includeExamples: z.boolean().default(true),\r\n  file: z\r\n    .any()\r\n    .refine((file) => file?.length > 0, 'File is required')\r\n    .refine(\r\n      (file) => file?.[0]?.size <= MAX_FILE_SIZE,\r\n      `File size must be less than 10MB`\r\n    )\r\n    .refine(\r\n      (file) => ACCEPTED_FILE_TYPES.includes(file?.[0]?.type),\r\n      'Only PDF, DOC, DOCX, and TXT files are accepted'\r\n    ),\r\n});\r\n\r\ntype DocumentProcessFormValues = z.infer<typeof documentProcessSchema>;\r\n\r\nexport default function DocumentProcessorPage() {\r\n  const navigate = useNavigate();\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [processedCards, setProcessedCards] = useState<ProcessedFlashcard[]>([]);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [step, setStep] = useState<'input' | 'review'>('input');\r\n  const [selectedFileName, setSelectedFileName] = useState<string | null>(null);\r\n  const [uploadProgress, setUploadProgress] = useState(0);\r\n  \r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    watch,\r\n    formState: { errors },\r\n    setValue,\r\n  } = useForm<DocumentProcessFormValues>({\r\n    resolver: zodResolver(documentProcessSchema),\r\n    defaultValues: {\r\n      title: '',\r\n      maxCards: 20,\r\n      includeImages: true,\r\n      includeExamples: true,\r\n    },\r\n  });\r\n\r\n  const watchFile = watch('file');\r\n\r\n  // Update the file name when a file is selected\r\n  React.useEffect(() => {\r\n    if (watchFile?.[0]) {\r\n      setSelectedFileName(watchFile[0].name);\r\n      \r\n      // Auto-generate title from filename if empty\r\n      if (!watch('title')) {\r\n        const fileName = watchFile[0].name.split('.')[0];\r\n        setValue('title', fileName.charAt(0).toUpperCase() + fileName.slice(1));\r\n      }\r\n    }\r\n  }, [watchFile, setValue, watch]);\r\n\r\n  const onSubmit = async (data: DocumentProcessFormValues) => {\r\n    setIsProcessing(true);\r\n    setError(null);\r\n    setUploadProgress(0);\r\n    \r\n    try {\r\n      const file = data.file[0];\r\n      \r\n      // Create form data\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      formData.append('title', data.title);\r\n      formData.append('maxCards', data.maxCards.toString());\r\n      formData.append('includeImages', data.includeImages.toString());\r\n      formData.append('includeExamples', data.includeExamples.toString());\r\n      \r\n      // Process the document with progress tracking\r\n      const result = await processorService.processDocument(formData, (progress) => {\r\n        setUploadProgress(progress);\r\n      });\r\n      \r\n      setProcessedCards(result.cards);\r\n      setStep('review');\r\n    } catch (err) {\r\n      setError('Failed to process document. Please try again.');\r\n      console.error(err);\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  const handleSaveFlashcards = async () => {\r\n    setIsProcessing(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const title = watch('title');\r\n      const newSetId = await flashcardService.createSet({\r\n        title,\r\n        description: `Generated from document processing on ${new Date().toLocaleDateString()}`,\r\n        cards: processedCards.map(card => ({\r\n          front: card.question,\r\n          back: card.answer,\r\n          imageUrl: card.imageUrl || null,\r\n        })),\r\n      });\r\n      \r\n      navigate(`/flashcards/${newSetId}`);\r\n    } catch (err) {\r\n      setError('Failed to save flashcards. Please try again.');\r\n      console.error(err);\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  const handleEditCard = (index: number, field: 'question' | 'answer', value: string) => {\r\n    const updatedCards = [...processedCards];\r\n    updatedCards[index] = {\r\n      ...updatedCards[index],\r\n      [field]: value,\r\n    };\r\n    setProcessedCards(updatedCards);\r\n  };\r\n\r\n  const handleRemoveCard = (index: number) => {\r\n    setProcessedCards(processedCards.filter((_, i) => i !== index));\r\n  };\r\n\r\n  const handleDragOver = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  };\r\n  \r\n  const handleDrop = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    \r\n    if (e.dataTransfer.files.length) {\r\n      setValue('file', e.dataTransfer.files);\r\n    }\r\n  };\r\n\r\n  const formatBytes = (bytes: number, decimals = 2) => {\r\n    if (bytes === 0) return '0 Bytes';\r\n    \r\n    const k = 1024;\r\n    const dm = decimals < 0 ? 0 : decimals;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    \r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    \r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <div className=\"mb-8\">\r\n        <h1 className=\"text-3xl font-bold text-neutral-900\">Document Processor</h1>\r\n        <p className=\"mt-2 text-neutral-600\">\r\n          Upload a document and convert its content into flashcards for effective studying.\r\n        </p>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"mb-6 rounded-lg border border-red-200 bg-red-50 p-4 text-red-700\">\r\n          {error}\r\n        </div>\r\n      )}\r\n\r\n      {step === 'input' ? (\r\n        <Card>\r\n          <CardContent className=\"p-6\">\r\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\r\n              <div \r\n                className={`flex flex-col items-center justify-center rounded-lg border-2 border-dashed p-6 ${\r\n                  errors.file ? 'border-red-300 bg-red-50' : 'border-neutral-300 bg-neutral-50'\r\n                }`}\r\n                onDragOver={handleDragOver}\r\n                onDrop={handleDrop}\r\n              >\r\n                <svg\r\n                  className={`mb-4 h-12 w-12 ${errors.file ? 'text-red-400' : 'text-neutral-400'}`}\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  fill=\"none\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  stroke=\"currentColor\"\r\n                >\r\n                  <path\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    strokeWidth={2}\r\n                    d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\"\r\n                  />\r\n                </svg>\r\n                \r\n                <div className=\"mb-4 text-center\">\r\n                  {selectedFileName ? (\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <p className=\"text-sm font-medium text-neutral-700\">{selectedFileName}</p>\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          setValue('file', null);\r\n                          setSelectedFileName(null);\r\n                        }}\r\n                        className=\"text-sm text-red-600 hover:text-red-500\"\r\n                      >\r\n                        Remove\r\n                      </button>\r\n                    </div>\r\n                  ) : (\r\n                    <>\r\n                      <p className=\"mb-1 text-sm font-medium text-neutral-700\">\r\n                        Drag and drop your file here, or click to select\r\n                      </p>\r\n                      <p className=\"text-xs text-neutral-500\">\r\n                        PDF, DOC, DOCX, TXT up to 10MB\r\n                      </p>\r\n                    </>\r\n                  )}\r\n                </div>\r\n\r\n                <input\r\n                  id=\"file\"\r\n                  type=\"file\"\r\n                  ref={fileInputRef}\r\n                  className=\"hidden\"\r\n                  accept=\".pdf,.doc,.docx,.txt\"\r\n                  {...register('file')}\r\n                />\r\n                \r\n                <button\r\n                  type=\"button\"\r\n                  className=\"inline-flex items-center rounded-md border border-neutral-300 bg-white px-4 py-2 text-sm font-medium text-neutral-700 shadow-sm hover:bg-neutral-50 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2\"\r\n                  onClick={() => fileInputRef.current?.click()}\r\n                >\r\n                  Select File\r\n                </button>\r\n                \r\n                {errors.file && (\r\n                  <p className=\"mt-2 text-sm text-red-600\">\r\n                    {errors.file.message?.toString()}\r\n                  </p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <label htmlFor=\"title\" className=\"block text-sm font-medium text-neutral-700\">\r\n                  Set Title\r\n                </label>\r\n                <input\r\n                  id=\"title\"\r\n                  type=\"text\"\r\n                  className={`mt-1 block w-full rounded-md border ${\r\n                    errors.title ? 'border-red-300' : 'border-neutral-300'\r\n                  } px-3 py-2 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-primary-500 sm:text-sm`}\r\n                  placeholder=\"Enter a title for your flashcard set\"\r\n                  {...register('title')}\r\n                />\r\n                {errors.title && (\r\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.title.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\r\n                <div>\r\n                  <label htmlFor=\"maxCards\" className=\"block text-sm font-medium text-neutral-700\">\r\n                    Maximum Cards\r\n                  </label>\r\n                  <input\r\n                    id=\"maxCards\"\r\n                    type=\"number\"\r\n                    min=\"5\"\r\n                    max=\"100\"\r\n                    className={`mt-1 block w-full rounded-md border ${\r\n                      errors.maxCards ? 'border-red-300' : 'border-neutral-300'\r\n                    } px-3 py-2 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-primary-500 sm:text-sm`}\r\n                    {...register('maxCards', { valueAsNumber: true })}\r\n                  />\r\n                  {errors.maxCards && (\r\n                    <p className=\"mt-1 text-sm text-red-600\">{errors.maxCards.message}</p>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex items-center\">\r\n                    <input\r\n                      id=\"includeImages\"\r\n                      type=\"checkbox\"\r\n                      className=\"h-4 w-4 rounded border-neutral-300 text-primary-600 focus:ring-primary-500\"\r\n                      {...register('includeImages')}\r\n                    />\r\n                    <label htmlFor=\"includeImages\" className=\"ml-2 block text-sm text-neutral-700\">\r\n                      Include relevant images (when available)\r\n                    </label>\r\n                  </div>\r\n                  <div className=\"flex items-center\">\r\n                    <input\r\n                      id=\"includeExamples\"\r\n                      type=\"checkbox\"\r\n                      className=\"h-4 w-4 rounded border-neutral-300 text-primary-600 focus:ring-primary-500\"\r\n                      {...register('includeExamples')}\r\n                    />\r\n                    <label htmlFor=\"includeExamples\" className=\"ml-2 block text-sm text-neutral-700\">\r\n                      Include examples in answers\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex justify-end space-x-3\">\r\n                <Link to=\"/dashboard\">\r\n                  <Button type=\"button\" variant=\"outline\">\r\n                    Cancel\r\n                  </Button>\r\n                </Link>\r\n                <Button type=\"submit\" isLoading={isProcessing}>\r\n                  {isProcessing ? 'Processing...' : 'Generate Flashcards'}\r\n                </Button>\r\n              </div>\r\n              \r\n              {isProcessing && uploadProgress > 0 && (\r\n                <div className=\"mt-4\">\r\n                  <p className=\"mb-1 text-sm text-neutral-700\">Uploading and processing...</p>\r\n                  <div className=\"h-2 w-full rounded-full bg-neutral-200\">\r\n                    <div\r\n                      className=\"h-2 rounded-full bg-primary-600\"\r\n                      style={{ width: `${uploadProgress}%` }}\r\n                    ></div>\r\n                  </div>\r\n                  <p className=\"mt-1 text-xs text-neutral-500\">{uploadProgress}% complete</p>\r\n                </div>\r\n              )}\r\n            </form>\r\n          </CardContent>\r\n        </Card>\r\n      ) : (\r\n        <div className=\"space-y-6\">\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"mb-4 flex justify-between\">\r\n                <h2 className=\"text-xl font-bold text-neutral-900\">Review Generated Cards</h2>\r\n                <p className=\"text-sm text-neutral-600\">{processedCards.length} cards generated</p>\r\n              </div>\r\n              <p className=\"text-neutral-600\">\r\n                Review and edit your cards before saving them to your flashcard set.\r\n              </p>\r\n              {selectedFileName && (\r\n                <p className=\"mt-2 text-xs text-neutral-500\">\r\n                  Source: {selectedFileName} ({watchFile?.[0]?.size && formatBytes(watchFile[0].size)})\r\n                </p>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {processedCards.map((card, index) => (\r\n            <Card key={index}>\r\n              <CardContent className=\"p-6\">\r\n                <div className=\"mb-4 grid grid-cols-12 gap-4\">\r\n                  <div className=\"col-span-12 sm:col-span-6\">\r\n                    <label className=\"block text-sm font-medium text-neutral-700\">\r\n                      Question\r\n                    </label>\r\n                    <textarea\r\n                      rows={3}\r\n                      value={card.question}\r\n                      onChange={(e) => handleEditCard(index, 'question', e.target.value)}\r\n                      className=\"mt-1 block w-full rounded-md border border-neutral-300 px-3 py-2 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-primary-500 sm:text-sm\"\r\n                    ></textarea>\r\n                  </div>\r\n                  <div className=\"col-span-12 sm:col-span-6\">\r\n                    <label className=\"block text-sm font-medium text-neutral-700\">\r\n                      Answer\r\n                    </label>\r\n                    <textarea\r\n                      rows={3}\r\n                      value={card.answer}\r\n                      onChange={(e) => handleEditCard(index, 'answer', e.target.value)}\r\n                      className=\"mt-1 block w-full rounded-md border border-neutral-300 px-3 py-2 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-primary-500 sm:text-sm\"\r\n                    ></textarea>\r\n                  </div>\r\n                </div>\r\n                {card.imageUrl && (\r\n                  <div className=\"mb-4\">\r\n                    <p className=\"mb-2 text-sm font-medium text-neutral-700\">Image</p>\r\n                    <img\r\n                      src={card.imageUrl}\r\n                      alt=\"Card illustration\"\r\n                      className=\"h-32 w-auto rounded-md border border-neutral-200 object-cover\"\r\n                    />\r\n                  </div>\r\n                )}\r\n                <div className=\"flex justify-end\">\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => handleRemoveCard(index)}\r\n                    className=\"inline-flex items-center rounded-md border border-transparent px-3 py-2 text-sm font-medium leading-4 text-red-700 hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2\"\r\n                  >\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      className=\"mr-2 h-4 w-4\"\r\n                      viewBox=\"0 0 20 20\"\r\n                      fill=\"currentColor\"\r\n                    >\r\n                      <path\r\n                        fillRule=\"evenodd\"\r\n                        d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\"\r\n                        clipRule=\"evenodd\"\r\n                      />\r\n                    </svg>\r\n                    Remove Card\r\n                  </button>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n\r\n          <div className=\"flex justify-between space-x-3\">\r\n            <Button type=\"button\" variant=\"outline\" onClick={() => setStep('input')}>\r\n              Back to Editor\r\n            </Button>\r\n            <Button \r\n              type=\"button\" \r\n              isLoading={isProcessing} \r\n              onClick={handleSaveFlashcards}\r\n              disabled={processedCards.length === 0}\r\n            >\r\n              Save Flashcard Set\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} "],"names":["MAX_FILE_SIZE","ACCEPTED_FILE_TYPES","documentProcessSchema","z","file","_a","DocumentProcessorPage","navigate","useNavigate","fileInputRef","useRef","isProcessing","setIsProcessing","useState","processedCards","setProcessedCards","error","setError","step","setStep","selectedFileName","setSelectedFileName","uploadProgress","setUploadProgress","register","handleSubmit","watch","errors","setValue","useForm","zodResolver","watchFile","React","fileName","onSubmit","data","formData","result","processorService","progress","err","handleSaveFlashcards","title","newSetId","flashcardService","card","handleEditCard","index","field","value","updatedCards","handleRemoveCard","_","i","handleDragOver","e","handleDrop","formatBytes","bytes","decimals","k","dm","sizes","jsxs","jsx","Card","CardContent","Fragment","Link","Button","_b"],"mappings":"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"}