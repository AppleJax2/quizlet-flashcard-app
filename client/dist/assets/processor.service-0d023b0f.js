import{a}from"./flashcard.service-8555d080.js";class v{constructor(){this.endpoint="/processor"}async processText(e){return a.post(`${this.endpoint}/text`,e)}async processUrl(e){return a.post(`${this.endpoint}/url`,e)}async processFile(e,t){const l=t?{language:t}:void 0;return a.uploadFile(`${this.endpoint}/file`,e,l)}async generateFlashcards(e){return a.post(`${this.endpoint}/generate`,e)}async getTaskStatus(e){return a.get(`${this.endpoint}/task/${e}`)}async cancelTask(e){return a.delete(`${this.endpoint}/task/${e}`)}async pollTaskUntilCompletion(e,t){const l=(t==null?void 0:t.intervalMs)||2e3,u=(t==null?void 0:t.maxAttempts)||60;let i=0;return new Promise((m,c)=>{const o=async()=>{var d;try{i++;const r=await this.getTaskStatus(e);if(!r.success||!r.data){clearInterval(n),c(new Error(r.message||"Failed to get task status"));return}const s=r.data;t!=null&&t.onProgress&&t.onProgress(s),s.status==="completed"?(clearInterval(n),m(s)):s.status==="failed"||s.status==="cancelled"?(clearInterval(n),c(new Error(((d=s.error)==null?void 0:d.message)||`Task ${s.status}`))):i>=u&&(clearInterval(n),c(new Error("Polling timeout exceeded")))}catch(r){clearInterval(n),c(r)}},n=setInterval(o,l);o()})}}const k=new v;export{k as p};
//# sourceMappingURL=processor.service-0d023b0f.js.map
