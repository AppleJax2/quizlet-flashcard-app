{"version":3,"file":"flashcard.service-8555d080.js","sources":["../../src/services/api.ts","../../src/services/flashcard.service.ts"],"sourcesContent":["import { ApiResponse } from '@/types';\r\n\r\n// Define Vite's import.meta.env type\r\ninterface ImportMetaEnv {\r\n  VITE_API_URL: string;\r\n}\r\n\r\ninterface ImportMeta {\r\n  readonly env: ImportMetaEnv;\r\n}\r\n\r\n// Original API URL \r\nconst ORIGINAL_API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5001/api/v1';\r\n\r\n// Set the API base URL directly\r\nconst API_BASE_URL = ORIGINAL_API_URL;\r\n\r\ninterface RequestOptions extends RequestInit {\r\n  params?: Record<string, any>;\r\n}\r\n\r\nclass ApiService {\r\n  private async request<T>(\r\n    endpoint: string,\r\n    options: RequestOptions = {}\r\n  ): Promise<T> {\r\n    const { params, ...init } = options;\r\n\r\n    // Build URL with query parameters\r\n    let url: URL;\r\n\r\n    // Construct the URL using the base URL\r\n    url = new URL(endpoint, API_BASE_URL);\r\n    \r\n    if (params) {\r\n      Object.entries(params).forEach(([key, value]) => {\r\n        if (Array.isArray(value)) {\r\n          value.forEach(v => url.searchParams.append(key, v));\r\n        } else if (value !== undefined && value !== null) {\r\n          url.searchParams.append(key, value.toString());\r\n        }\r\n      });\r\n    }\r\n\r\n    // Get token from localStorage\r\n    const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null;\r\n\r\n    // Prepare headers\r\n    const headers = new Headers(init.headers);\r\n    if (token) {\r\n      headers.set('Authorization', `Bearer ${token}`);\r\n    }\r\n    if (!headers.has('Content-Type') && init.body) {\r\n      headers.set('Content-Type', 'application/json');\r\n    }\r\n    \r\n    try {\r\n      console.log(`Making request to: ${url.toString()}`); // Debug logging\r\n      \r\n      const response = await fetch(url.toString(), {\r\n        ...init,\r\n        headers,\r\n        // Removed mode: 'cors'\r\n      });\r\n\r\n      console.log(`Response status: ${response.status}`);\r\n      \r\n      // For debugging, log the raw response text before parsing JSON\r\n      const responseText = await response.text();\r\n      console.log(`Response body: ${responseText}`);\r\n      \r\n      // Convert text back to response for further processing\r\n      const responseData = responseText ? JSON.parse(responseText) : null;\r\n\r\n      // Handle unauthorized access\r\n      if (response.status === 401) {\r\n        // Clear token and redirect to login\r\n        if (typeof window !== 'undefined') {\r\n          localStorage.removeItem('token');\r\n          window.location.href = '/login';\r\n        }\r\n        throw new Error('Unauthorized');\r\n      }\r\n\r\n      // Handle non-2xx responses\r\n      if (!response.ok) {\r\n        // Use the already parsed response data\r\n        const errorData = responseData || {};\r\n        \r\n        // Special case: if the response has success=true, don't treat it as an error\r\n        // This handles cases where the API returns success data with a non-2XX status code\r\n        if (errorData.success === true) {\r\n          return errorData;\r\n        }\r\n        \r\n        throw new Error(errorData.message || `API Error: ${response.status}`);\r\n      }\r\n\r\n      // Return null for 204 No Content\r\n      if (response.status === 204) {\r\n        return null as T;\r\n      }\r\n\r\n      return responseData;\r\n    } catch (error) {\r\n      console.error('API request error:', error); // Debug logging\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error('An error occurred');\r\n    }\r\n  }\r\n\r\n  async get<T>(endpoint: string, options: RequestOptions = {}): Promise<T> {\r\n    return this.request<T>(endpoint, { ...options, method: 'GET' });\r\n  }\r\n\r\n  async post<T>(endpoint: string, data?: any, options: RequestOptions = {}): Promise<T> {\r\n    return this.request<T>(endpoint, {\r\n      ...options,\r\n      method: 'POST',\r\n      body: data ? JSON.stringify(data) : null,\r\n    });\r\n  }\r\n\r\n  async put<T>(endpoint: string, data?: any, options: RequestOptions = {}): Promise<T> {\r\n    return this.request<T>(endpoint, {\r\n      ...options,\r\n      method: 'PUT',\r\n      body: data ? JSON.stringify(data) : null,\r\n    });\r\n  }\r\n\r\n  async patch<T>(endpoint: string, data?: any, options: RequestOptions = {}): Promise<T> {\r\n    return this.request<T>(endpoint, {\r\n      ...options,\r\n      method: 'PATCH',\r\n      body: data ? JSON.stringify(data) : null,\r\n    });\r\n  }\r\n\r\n  async delete<T>(endpoint: string, options: RequestOptions = {}): Promise<T> {\r\n    return this.request<T>(endpoint, { ...options, method: 'DELETE' });\r\n  }\r\n}\r\n\r\n// Export as default\r\nconst apiService = new ApiService();\r\nexport default apiService; ","import {\r\n  CreateFlashcardSetRequest,\r\n  FlashcardSet,\r\n  FlashcardSetQueryParams,\r\n  FlashcardSetSearchResults,\r\n  FlashcardSetSummary,\r\n  FlashcardStatistics,\r\n  UpdateFlashcardSetRequest,\r\n  Flashcard,\r\n} from '@/types';\r\nimport apiService from './api';\r\n\r\nclass FlashcardService {\r\n  // Base endpoint for flashcard sets\r\n  private endpoint = '/flashcard-sets';\r\n\r\n  // Get all flashcard sets for the authenticated user\r\n  async getFlashcardSets(params?: FlashcardSetQueryParams) {\r\n    return apiService.get<FlashcardSetSearchResults>(this.endpoint, params ? { params } : undefined);\r\n  }\r\n\r\n  // Get recent flashcard sets for the authenticated user\r\n  async getRecentSets(limit = 6) {\r\n    const result = await this.getFlashcardSets({ limit, sortBy: 'updatedAt', order: 'desc' });\r\n    return result.results || [];\r\n  }\r\n\r\n  // Get public flashcard sets\r\n  async getPublicFlashcardSets(params?: FlashcardSetQueryParams) {\r\n    return apiService.get<FlashcardSetSearchResults>(`${this.endpoint}/public`, params ? { params } : undefined);\r\n  }\r\n\r\n  // Search flashcard sets\r\n  async searchFlashcardSets(query: string, params?: Omit<FlashcardSetQueryParams, 'search'>) {\r\n    return apiService.get<FlashcardSetSearchResults>(`${this.endpoint}/search`, {\r\n      params: {\r\n        search: query,\r\n        ...(params || {})\r\n      }\r\n    });\r\n  }\r\n\r\n  // Get a specific flashcard set by ID\r\n  async getFlashcardSet(id: string) {\r\n    return apiService.get<FlashcardSet>(`${this.endpoint}/${id}`);\r\n  }\r\n\r\n  // Get statistics for a flashcard set\r\n  async getFlashcardSetStats(id: string) {\r\n    return apiService.get<FlashcardStatistics>(`${this.endpoint}/${id}/stats`);\r\n  }\r\n\r\n  // Create a new flashcard set\r\n  async createFlashcardSet(data: CreateFlashcardSetRequest) {\r\n    return apiService.post<FlashcardSet>(this.endpoint, data);\r\n  }\r\n\r\n  // Update an existing flashcard set\r\n  async updateFlashcardSet(id: string, data: UpdateFlashcardSetRequest) {\r\n    return apiService.put<FlashcardSet>(`${this.endpoint}/${id}`, data);\r\n  }\r\n\r\n  // Duplicate a flashcard set\r\n  async duplicateFlashcardSet(id: string) {\r\n    return apiService.post<FlashcardSet>(`${this.endpoint}/${id}/duplicate`);\r\n  }\r\n\r\n  // Delete a flashcard set\r\n  async deleteFlashcardSet(id: string) {\r\n    return apiService.delete<{ message: string }>(`${this.endpoint}/${id}`);\r\n  }\r\n\r\n  // Add a new flashcard to a set\r\n  async addFlashcard(setId: string, flashcard: Flashcard) {\r\n    return apiService.post<Flashcard>(`${this.endpoint}/${setId}/flashcards`, flashcard);\r\n  }\r\n\r\n  // Update an existing flashcard in a set\r\n  async updateFlashcard(setId: string, flashcardId: string, flashcard: Flashcard) {\r\n    return apiService.put<Flashcard>(`${this.endpoint}/${setId}/flashcards/${flashcardId}`, flashcard);\r\n  }\r\n\r\n  // Delete a flashcard from a set\r\n  async deleteFlashcard(setId: string, flashcardId: string) {\r\n    return apiService.delete<{ message: string }>(`${this.endpoint}/${setId}/flashcards/${flashcardId}`);\r\n  }\r\n}\r\n\r\n// Create a singleton instance\r\nconst flashcardService = new FlashcardService();\r\n\r\nexport default flashcardService; "],"names":["ORIGINAL_API_URL","API_BASE_URL","ApiService","endpoint","options","params","init","url","key","value","v","token","headers","response","responseText","responseData","errorData","error","data","apiService","FlashcardService","limit","query","id","setId","flashcard","flashcardId","flashcardService"],"mappings":"AAYA,MAAMA,EAAmB,sDAGnBC,EAAeD,EAMrB,MAAME,CAAW,CACf,MAAc,QACZC,EACAC,EAA0B,GACd,CACZ,KAAM,CAAE,OAAAC,EAAQ,GAAGC,CAAA,EAASF,EAGxB,IAAAG,EAGEA,EAAA,IAAI,IAAIJ,EAAUF,CAAY,EAEhCI,GACK,OAAA,QAAQA,CAAM,EAAE,QAAQ,CAAC,CAACG,EAAKC,CAAK,IAAM,CAC3C,MAAM,QAAQA,CAAK,EACrBA,EAAM,QAAaC,GAAAH,EAAI,aAAa,OAAOC,EAAKE,CAAC,CAAC,EAClBD,GAAU,MAC1CF,EAAI,aAAa,OAAOC,EAAKC,EAAM,UAAU,CAC/C,CACD,EAIH,MAAME,EAAQ,OAAO,OAAW,IAAc,aAAa,QAAQ,OAAO,EAAI,KAGxEC,EAAU,IAAI,QAAQN,EAAK,OAAO,EACpCK,GACFC,EAAQ,IAAI,gBAAiB,UAAUD,CAAK,EAAE,EAE5C,CAACC,EAAQ,IAAI,cAAc,GAAKN,EAAK,MAC/BM,EAAA,IAAI,eAAgB,kBAAkB,EAG5C,GAAA,CACF,QAAQ,IAAI,sBAAsBL,EAAI,SAAA,CAAU,EAAE,EAElD,MAAMM,EAAW,MAAM,MAAMN,EAAI,WAAY,CAC3C,GAAGD,EACH,QAAAM,CAAA,CAED,EAED,QAAQ,IAAI,oBAAoBC,EAAS,MAAM,EAAE,EAG3C,MAAAC,EAAe,MAAMD,EAAS,OAC5B,QAAA,IAAI,kBAAkBC,CAAY,EAAE,EAG5C,MAAMC,EAAeD,EAAe,KAAK,MAAMA,CAAY,EAAI,KAG3D,GAAAD,EAAS,SAAW,IAElB,MAAA,OAAO,OAAW,MACpB,aAAa,WAAW,OAAO,EAC/B,OAAO,SAAS,KAAO,UAEnB,IAAI,MAAM,cAAc,EAI5B,GAAA,CAACA,EAAS,GAAI,CAEV,MAAAG,EAAYD,GAAgB,GAI9B,GAAAC,EAAU,UAAY,GACjB,OAAAA,EAGT,MAAM,IAAI,MAAMA,EAAU,SAAW,cAAcH,EAAS,MAAM,EAAE,CACtE,CAGI,OAAAA,EAAS,SAAW,IACf,KAGFE,QACAE,EAAO,CAEd,MADQ,QAAA,MAAM,qBAAsBA,CAAK,EACrCA,aAAiB,MACbA,EAEF,IAAI,MAAM,mBAAmB,CACrC,CACF,CAEA,MAAM,IAAOd,EAAkBC,EAA0B,GAAgB,CAChE,OAAA,KAAK,QAAWD,EAAU,CAAE,GAAGC,EAAS,OAAQ,MAAO,CAChE,CAEA,MAAM,KAAQD,EAAkBe,EAAYd,EAA0B,CAAA,EAAgB,CAC7E,OAAA,KAAK,QAAWD,EAAU,CAC/B,GAAGC,EACH,OAAQ,OACR,KAAMc,EAAO,KAAK,UAAUA,CAAI,EAAI,IAAA,CACrC,CACH,CAEA,MAAM,IAAOf,EAAkBe,EAAYd,EAA0B,CAAA,EAAgB,CAC5E,OAAA,KAAK,QAAWD,EAAU,CAC/B,GAAGC,EACH,OAAQ,MACR,KAAMc,EAAO,KAAK,UAAUA,CAAI,EAAI,IAAA,CACrC,CACH,CAEA,MAAM,MAASf,EAAkBe,EAAYd,EAA0B,CAAA,EAAgB,CAC9E,OAAA,KAAK,QAAWD,EAAU,CAC/B,GAAGC,EACH,OAAQ,QACR,KAAMc,EAAO,KAAK,UAAUA,CAAI,EAAI,IAAA,CACrC,CACH,CAEA,MAAM,OAAUf,EAAkBC,EAA0B,GAAgB,CACnE,OAAA,KAAK,QAAWD,EAAU,CAAE,GAAGC,EAAS,OAAQ,SAAU,CACnE,CACF,CAGM,MAAAe,EAAa,IAAIjB,ECvIvB,MAAMkB,CAAiB,CAAvB,aAAA,CAEE,KAAQ,SAAW,iBAAA,CAGnB,MAAM,iBAAiBf,EAAkC,CAChD,OAAAc,EAAW,IAA+B,KAAK,SAAUd,EAAS,CAAE,OAAAA,CAAA,EAAW,MAAS,CACjG,CAGA,MAAM,cAAcgB,EAAQ,EAAG,CAEtB,OADQ,MAAM,KAAK,iBAAiB,CAAE,MAAAA,EAAO,OAAQ,YAAa,MAAO,MAAA,CAAQ,GAC1E,SAAW,EAC3B,CAGA,MAAM,uBAAuBhB,EAAkC,CACtD,OAAAc,EAAW,IAA+B,GAAG,KAAK,QAAQ,UAAWd,EAAS,CAAE,OAAAA,GAAW,MAAS,CAC7G,CAGA,MAAM,oBAAoBiB,EAAejB,EAAkD,CACzF,OAAOc,EAAW,IAA+B,GAAG,KAAK,QAAQ,UAAW,CAC1E,OAAQ,CACN,OAAQG,EACR,GAAIjB,GAAU,CAAC,CACjB,CAAA,CACD,CACH,CAGA,MAAM,gBAAgBkB,EAAY,CAChC,OAAOJ,EAAW,IAAkB,GAAG,KAAK,QAAQ,IAAII,CAAE,EAAE,CAC9D,CAGA,MAAM,qBAAqBA,EAAY,CACrC,OAAOJ,EAAW,IAAyB,GAAG,KAAK,QAAQ,IAAII,CAAE,QAAQ,CAC3E,CAGA,MAAM,mBAAmBL,EAAiC,CACxD,OAAOC,EAAW,KAAmB,KAAK,SAAUD,CAAI,CAC1D,CAGA,MAAM,mBAAmBK,EAAYL,EAAiC,CAC7D,OAAAC,EAAW,IAAkB,GAAG,KAAK,QAAQ,IAAII,CAAE,GAAIL,CAAI,CACpE,CAGA,MAAM,sBAAsBK,EAAY,CACtC,OAAOJ,EAAW,KAAmB,GAAG,KAAK,QAAQ,IAAII,CAAE,YAAY,CACzE,CAGA,MAAM,mBAAmBA,EAAY,CACnC,OAAOJ,EAAW,OAA4B,GAAG,KAAK,QAAQ,IAAII,CAAE,EAAE,CACxE,CAGA,MAAM,aAAaC,EAAeC,EAAsB,CAC/C,OAAAN,EAAW,KAAgB,GAAG,KAAK,QAAQ,IAAIK,CAAK,cAAeC,CAAS,CACrF,CAGA,MAAM,gBAAgBD,EAAeE,EAAqBD,EAAsB,CACvE,OAAAN,EAAW,IAAe,GAAG,KAAK,QAAQ,IAAIK,CAAK,eAAeE,CAAW,GAAID,CAAS,CACnG,CAGA,MAAM,gBAAgBD,EAAeE,EAAqB,CACjD,OAAAP,EAAW,OAA4B,GAAG,KAAK,QAAQ,IAAIK,CAAK,eAAeE,CAAW,EAAE,CACrG,CACF,CAGM,MAAAC,EAAmB,IAAIP"}