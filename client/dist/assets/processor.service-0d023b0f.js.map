{"version":3,"file":"processor.service-0d023b0f.js","sources":["../../src/services/processor.service.ts"],"sourcesContent":["import {\r\n  FileProcessingResponse,\r\n  GenerationParams,\r\n  GenerationResponse,\r\n  ProcessedContent,\r\n  ProcessingTask,\r\n  TextProcessingRequest,\r\n  UrlProcessingRequest,\r\n} from '@/types';\r\nimport apiService from './api';\r\n\r\nclass ProcessorService {\r\n  // Base endpoint for processor\r\n  private endpoint = '/processor';\r\n\r\n  // Process text content\r\n  async processText(data: TextProcessingRequest) {\r\n    return apiService.post<FileProcessingResponse>(`${this.endpoint}/text`, data);\r\n  }\r\n\r\n  // Process URL content\r\n  async processUrl(data: UrlProcessingRequest) {\r\n    return apiService.post<FileProcessingResponse>(`${this.endpoint}/url`, data);\r\n  }\r\n\r\n  // Process file upload\r\n  async processFile(file: File, language?: string) {\r\n    const additionalData = language ? { language } : undefined;\r\n    return apiService.uploadFile<FileProcessingResponse>(\r\n      `${this.endpoint}/file`,\r\n      file,\r\n      additionalData\r\n    );\r\n  }\r\n\r\n  // Generate flashcards from processed content\r\n  async generateFlashcards(params: GenerationParams) {\r\n    return apiService.post<GenerationResponse>(`${this.endpoint}/generate`, params);\r\n  }\r\n\r\n  // Get task status\r\n  async getTaskStatus(taskId: string) {\r\n    return apiService.get<ProcessingTask>(`${this.endpoint}/task/${taskId}`);\r\n  }\r\n\r\n  // Cancel a running task\r\n  async cancelTask(taskId: string) {\r\n    return apiService.delete<{ message: string }>(`${this.endpoint}/task/${taskId}`);\r\n  }\r\n\r\n  // Poll task status until completion or failure\r\n  async pollTaskUntilCompletion(taskId: string, options?: {\r\n    intervalMs?: number;\r\n    maxAttempts?: number;\r\n    onProgress?: (task: ProcessingTask) => void;\r\n  }): Promise<ProcessingTask> {\r\n    const intervalMs = options?.intervalMs || 2000;\r\n    const maxAttempts = options?.maxAttempts || 60; // Default 2 minutes max\r\n    \r\n    let attempts = 0;\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const checkStatus = async () => {\r\n        try {\r\n          attempts++;\r\n          \r\n          const response = await this.getTaskStatus(taskId);\r\n          \r\n          if (!response.success || !response.data) {\r\n            clearInterval(interval);\r\n            reject(new Error(response.message || 'Failed to get task status'));\r\n            return;\r\n          }\r\n          \r\n          const task = response.data;\r\n          \r\n          // Call progress callback if provided\r\n          if (options?.onProgress) {\r\n            options.onProgress(task);\r\n          }\r\n          \r\n          // Check task status\r\n          if (task.status === 'completed') {\r\n            clearInterval(interval);\r\n            resolve(task);\r\n          } else if (task.status === 'failed' || task.status === 'cancelled') {\r\n            clearInterval(interval);\r\n            reject(new Error(task.error?.message || `Task ${task.status}`));\r\n          } else if (attempts >= maxAttempts) {\r\n            clearInterval(interval);\r\n            reject(new Error('Polling timeout exceeded'));\r\n          }\r\n        } catch (error) {\r\n          clearInterval(interval);\r\n          reject(error);\r\n        }\r\n      };\r\n      \r\n      // Start polling\r\n      const interval = setInterval(checkStatus, intervalMs);\r\n      checkStatus(); // Immediate first check\r\n    });\r\n  }\r\n}\r\n\r\n// Create a singleton instance\r\nconst processorService = new ProcessorService();\r\n\r\nexport default processorService; "],"names":["ProcessorService","data","apiService","file","language","additionalData","params","taskId","options","intervalMs","maxAttempts","attempts","resolve","reject","checkStatus","response","interval","task","_a","error","processorService"],"mappings":"+CAWA,MAAMA,CAAiB,CAAvB,aAAA,CAEE,KAAQ,SAAW,YAAA,CAGnB,MAAM,YAAYC,EAA6B,CAC7C,OAAOC,EAAW,KAA6B,GAAG,KAAK,QAAQ,QAASD,CAAI,CAC9E,CAGA,MAAM,WAAWA,EAA4B,CAC3C,OAAOC,EAAW,KAA6B,GAAG,KAAK,QAAQ,OAAQD,CAAI,CAC7E,CAGA,MAAM,YAAYE,EAAYC,EAAmB,CAC/C,MAAMC,EAAiBD,EAAW,CAAE,SAAAA,CAAa,EAAA,OACjD,OAAOF,EAAW,WAChB,GAAG,KAAK,QAAQ,QAChBC,EACAE,CAAA,CAEJ,CAGA,MAAM,mBAAmBC,EAA0B,CACjD,OAAOJ,EAAW,KAAyB,GAAG,KAAK,QAAQ,YAAaI,CAAM,CAChF,CAGA,MAAM,cAAcC,EAAgB,CAClC,OAAOL,EAAW,IAAoB,GAAG,KAAK,QAAQ,SAASK,CAAM,EAAE,CACzE,CAGA,MAAM,WAAWA,EAAgB,CAC/B,OAAOL,EAAW,OAA4B,GAAG,KAAK,QAAQ,SAASK,CAAM,EAAE,CACjF,CAGA,MAAM,wBAAwBA,EAAgBC,EAIlB,CACpB,MAAAC,GAAaD,GAAA,YAAAA,EAAS,aAAc,IACpCE,GAAcF,GAAA,YAAAA,EAAS,cAAe,GAE5C,IAAIG,EAAW,EAEf,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtC,MAAMC,EAAc,SAAY,OAC1B,GAAA,CACFH,IAEA,MAAMI,EAAW,MAAM,KAAK,cAAcR,CAAM,EAEhD,GAAI,CAACQ,EAAS,SAAW,CAACA,EAAS,KAAM,CACvC,cAAcC,CAAQ,EACtBH,EAAO,IAAI,MAAME,EAAS,SAAW,2BAA2B,CAAC,EACjE,MACF,CAEA,MAAME,EAAOF,EAAS,KAGlBP,GAAA,MAAAA,EAAS,YACXA,EAAQ,WAAWS,CAAI,EAIrBA,EAAK,SAAW,aAClB,cAAcD,CAAQ,EACtBJ,EAAQK,CAAI,GACHA,EAAK,SAAW,UAAYA,EAAK,SAAW,aACrD,cAAcD,CAAQ,EACfH,EAAA,IAAI,QAAMK,EAAAD,EAAK,QAAL,YAAAC,EAAY,UAAW,QAAQD,EAAK,MAAM,EAAE,CAAC,GACrDN,GAAYD,IACrB,cAAcM,CAAQ,EACfH,EAAA,IAAI,MAAM,0BAA0B,CAAC,SAEvCM,EAAO,CACd,cAAcH,CAAQ,EACtBH,EAAOM,CAAK,CACd,CAAA,EAIIH,EAAW,YAAYF,EAAaL,CAAU,EACxCK,GAAA,CACb,CACH,CACF,CAGM,MAAAM,EAAmB,IAAIpB"}