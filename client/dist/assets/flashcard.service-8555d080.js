const p="https://quizlet-flashcard-app-1.onrender.com/api/v1",y=p;class f{async request(e,t={}){const{params:n,...d}=t;let o;o=new URL(e,y),n&&Object.entries(n).forEach(([r,a])=>{Array.isArray(a)?a.forEach(i=>o.searchParams.append(r,i)):a!=null&&o.searchParams.append(r,a.toString())});const l=typeof window<"u"?localStorage.getItem("token"):null,c=new Headers(d.headers);l&&c.set("Authorization",`Bearer ${l}`),!c.has("Content-Type")&&d.body&&c.set("Content-Type","application/json");try{console.log(`Making request to: ${o.toString()}`);const r=await fetch(o.toString(),{...d,headers:c});console.log(`Response status: ${r.status}`);const a=await r.text();console.log(`Response body: ${a}`);const i=a?JSON.parse(a):null;if(r.status===401)throw typeof window<"u"&&(localStorage.removeItem("token"),window.location.href="/login"),new Error("Unauthorized");if(!r.ok){const h=i||{};if(h.success===!0)return h;throw new Error(h.message||`API Error: ${r.status}`)}return r.status===204?null:i}catch(r){throw console.error("API request error:",r),r instanceof Error?r:new Error("An error occurred")}}async get(e,t={}){return this.request(e,{...t,method:"GET"})}async post(e,t,n={}){return this.request(e,{...n,method:"POST",body:t?JSON.stringify(t):null})}async put(e,t,n={}){return this.request(e,{...n,method:"PUT",body:t?JSON.stringify(t):null})}async patch(e,t,n={}){return this.request(e,{...n,method:"PATCH",body:t?JSON.stringify(t):null})}async delete(e,t={}){return this.request(e,{...t,method:"DELETE"})}}const s=new f;class g{constructor(){this.endpoint="/flashcard-sets"}async getFlashcardSets(e){return s.get(this.endpoint,e?{params:e}:void 0)}async getRecentSets(e=6){return(await this.getFlashcardSets({limit:e,sortBy:"updatedAt",order:"desc"})).results||[]}async getPublicFlashcardSets(e){return s.get(`${this.endpoint}/public`,e?{params:e}:void 0)}async searchFlashcardSets(e,t){return s.get(`${this.endpoint}/search`,{params:{search:e,...t||{}}})}async getFlashcardSet(e){return s.get(`${this.endpoint}/${e}`)}async getFlashcardSetStats(e){return s.get(`${this.endpoint}/${e}/stats`)}async createFlashcardSet(e){return s.post(this.endpoint,e)}async updateFlashcardSet(e,t){return s.put(`${this.endpoint}/${e}`,t)}async duplicateFlashcardSet(e){return s.post(`${this.endpoint}/${e}/duplicate`)}async deleteFlashcardSet(e){return s.delete(`${this.endpoint}/${e}`)}async addFlashcard(e,t){return s.post(`${this.endpoint}/${e}/flashcards`,t)}async updateFlashcard(e,t,n){return s.put(`${this.endpoint}/${e}/flashcards/${t}`,n)}async deleteFlashcard(e,t){return s.delete(`${this.endpoint}/${e}/flashcards/${t}`)}}const S=new g;export{s as a,S as f};
//# sourceMappingURL=flashcard.service-8555d080.js.map
