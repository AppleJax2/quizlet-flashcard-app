{"version":3,"file":"TextProcessorPage-eba81047.js","sources":["../../src/components/ui/FormFeedback.tsx","../../src/components/ui/Skeleton.tsx","../../src/pages/app/processor/TextProcessorPage.tsx"],"sourcesContent":["import React from 'react';\r\nimport { cn } from '@/utils/cn';\r\n\r\nexport interface FormFeedbackProps {\r\n  message: string;\r\n  type: 'error' | 'success' | 'info' | 'warning';\r\n  id?: string;\r\n  className?: string;\r\n  icon?: boolean;\r\n}\r\n\r\n/**\r\n * FormFeedback component for displaying validation messages with consistent styling\r\n */\r\nexport const FormFeedback: React.FC<FormFeedbackProps> = ({\r\n  message,\r\n  type = 'info',\r\n  id,\r\n  className,\r\n  icon = true,\r\n}) => {\r\n  const typeStyles = {\r\n    error: 'text-red-600',\r\n    success: 'text-green-600',\r\n    info: 'text-blue-600',\r\n    warning: 'text-amber-600',\r\n  };\r\n\r\n  const iconMap = {\r\n    error: (\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 20 20\"\r\n        fill=\"currentColor\"\r\n        className=\"mr-1.5 h-4 w-4 flex-shrink-0\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z\"\r\n          clipRule=\"evenodd\"\r\n        />\r\n      </svg>\r\n    ),\r\n    success: (\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 20 20\"\r\n        fill=\"currentColor\"\r\n        className=\"mr-1.5 h-4 w-4 flex-shrink-0\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\"\r\n          clipRule=\"evenodd\"\r\n        />\r\n      </svg>\r\n    ),\r\n    info: (\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 20 20\"\r\n        fill=\"currentColor\"\r\n        className=\"mr-1.5 h-4 w-4 flex-shrink-0\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z\"\r\n          clipRule=\"evenodd\"\r\n        />\r\n      </svg>\r\n    ),\r\n    warning: (\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 20 20\"\r\n        fill=\"currentColor\"\r\n        className=\"mr-1.5 h-4 w-4 flex-shrink-0\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          d=\"M8.485 2.495c.673-1.167 2.357-1.167 3.03 0l6.28 10.875c.673 1.167-.17 2.625-1.516 2.625H3.72c-1.347 0-2.189-1.458-1.515-2.625L8.485 2.495zM10 5a.75.75 0 01.75.75v3.5a.75.75 0 01-1.5 0v-3.5A.75.75 0 0110 5zm0 9a1 1 0 100-2 1 1 0 000 2z\"\r\n          clipRule=\"evenodd\"\r\n        />\r\n      </svg>\r\n    ),\r\n  };\r\n\r\n  return (\r\n    <p\r\n      id={id}\r\n      className={cn(\r\n        'mt-1.5 text-xs flex items-center',\r\n        typeStyles[type],\r\n        className\r\n      )}\r\n      role={type === 'error' ? 'alert' : 'status'}\r\n    >\r\n      {icon && iconMap[type]}\r\n      {message}\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default FormFeedback; ","import React from 'react';\r\nimport { cn } from '@/utils/cn';\r\n\r\ninterface SkeletonProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  /**\r\n   * The width of the skeleton\r\n   * @default \"100%\"\r\n   */\r\n  width?: string | number;\r\n  \r\n  /**\r\n   * The height of the skeleton\r\n   * @default \"1rem\"\r\n   */\r\n  height?: string | number;\r\n  \r\n  /**\r\n   * Whether to animate the skeleton\r\n   * @default true\r\n   */\r\n  animate?: boolean;\r\n  \r\n  /**\r\n   * The border radius of the skeleton\r\n   * @default \"0.25rem\"\r\n   */\r\n  radius?: string | number;\r\n  \r\n  /**\r\n   * Whether the skeleton should be circular\r\n   * @default false\r\n   */\r\n  circle?: boolean;\r\n}\r\n\r\n/**\r\n * Skeleton component for loading states\r\n */\r\nexport const Skeleton: React.FC<SkeletonProps> = ({\r\n  className,\r\n  width = '100%',\r\n  height = '1rem',\r\n  animate = true,\r\n  radius = '0.25rem',\r\n  circle = false,\r\n  ...props\r\n}) => {\r\n  const getSize = (size: string | number) => \r\n    typeof size === 'number' ? `${size}px` : size;\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        'bg-neutral-200',\r\n        animate && 'animate-pulse',\r\n        className\r\n      )}\r\n      style={{\r\n        width: getSize(width),\r\n        height: getSize(height),\r\n        borderRadius: circle ? '50%' : getSize(radius),\r\n      }}\r\n      aria-hidden=\"true\"\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\n/**\r\n * Creates a skeleton for text with multiple lines\r\n */\r\nexport const SkeletonText: React.FC<{\r\n  lines?: number;\r\n  spacing?: number | string;\r\n  lastLineWidth?: string | number;\r\n  height?: string | number;\r\n  className?: string;\r\n}> = ({\r\n  lines = 3,\r\n  spacing = '0.5rem',\r\n  lastLineWidth = '75%',\r\n  height = '0.75rem',\r\n  className,\r\n}) => {\r\n  const getSize = (size: string | number) => \r\n    typeof size === 'number' ? `${size}px` : size;\r\n  \r\n  return (\r\n    <div className={cn('space-y-2', className)}>\r\n      {Array(lines)\r\n        .fill(0)\r\n        .map((_, index) => (\r\n          <Skeleton\r\n            key={index}\r\n            height={height}\r\n            width={index === lines - 1 ? lastLineWidth : '100%'}\r\n            className=\"block\"\r\n            style={{ marginTop: index === 0 ? 0 : getSize(spacing) }}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * Creates a skeleton for an avatar (circular)\r\n */\r\nexport const SkeletonAvatar: React.FC<{\r\n  size?: number | string;\r\n  className?: string;\r\n}> = ({ size = 40, className }) => (\r\n  <Skeleton width={size} height={size} circle className={className} />\r\n);\r\n\r\n/**\r\n * Creates a skeleton for a card\r\n */\r\nexport const SkeletonCard: React.FC<{\r\n  height?: number | string;\r\n  className?: string;\r\n  children?: React.ReactNode;\r\n}> = ({ height = 150, className, children }) => (\r\n  <Skeleton \r\n    height={height} \r\n    className={cn('rounded-lg overflow-hidden', className)}\r\n  >\r\n    {children}\r\n  </Skeleton>\r\n);\r\n\r\nexport default Skeleton; ","import React, { useState, useCallback, useMemo } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { z } from 'zod';\r\n\r\nimport { Card, CardContent } from '@/components/ui/Card';\r\nimport Button from '@/components/ui/Button';\r\nimport Input from '@/components/ui/Input';\r\nimport FormFeedback from '@/components/ui/FormFeedback';\r\nimport { Skeleton, SkeletonText } from '@/components/ui/Skeleton';\r\nimport { processorService, flashcardService } from '@/services';\r\nimport { ProcessedFlashcard } from '@/types/processor';\r\n\r\nconst textProcessSchema = z.object({\r\n  title: z.string().min(1, 'Title is required'),\r\n  content: z.string().min(10, 'Text must be at least 10 characters long'),\r\n  maxCards: z.number().int().min(5, 'Minimum 5 cards required').max(100, 'Maximum 100 cards allowed'),\r\n  includeImages: z.boolean().default(false),\r\n  includeExamples: z.boolean().default(true),\r\n});\r\n\r\ntype TextProcessFormValues = z.infer<typeof textProcessSchema>;\r\n\r\n// Memoized flashcard item component\r\nconst FlashcardItem = React.memo(({ \r\n  card, \r\n  index, \r\n  onEdit, \r\n  onRemove \r\n}: { \r\n  card: ProcessedFlashcard; \r\n  index: number; \r\n  onEdit: (index: number, field: 'question' | 'answer', value: string) => void;\r\n  onRemove: (index: number) => void;\r\n}) => {\r\n  return (\r\n    <Card key={index} className=\"mb-4\">\r\n      <CardContent className=\"p-6\">\r\n        <div className=\"mb-4\">\r\n          <label htmlFor={`question-${index}`} className=\"mb-1 block text-sm font-medium text-neutral-700\">\r\n            Question\r\n          </label>\r\n          <textarea\r\n            id={`question-${index}`}\r\n            rows={2}\r\n            className=\"block w-full rounded-md border border-neutral-300 px-3 py-2 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-primary-500 sm:text-sm\"\r\n            value={card.question}\r\n            onChange={(e) => onEdit(index, 'question', e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"mb-4\">\r\n          <label htmlFor={`answer-${index}`} className=\"mb-1 block text-sm font-medium text-neutral-700\">\r\n            Answer\r\n          </label>\r\n          <textarea\r\n            id={`answer-${index}`}\r\n            rows={3}\r\n            className=\"block w-full rounded-md border border-neutral-300 px-3 py-2 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-primary-500 sm:text-sm\"\r\n            value={card.answer}\r\n            onChange={(e) => onEdit(index, 'answer', e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        {card.imageUrl && (\r\n          <div className=\"mb-4\">\r\n            <p className=\"mb-1 block text-sm font-medium text-neutral-700\">Image</p>\r\n            <img \r\n              src={card.imageUrl} \r\n              alt=\"Flashcard visual aid\" \r\n              className=\"max-h-40 rounded-md border border-neutral-300\"\r\n              loading=\"lazy\"\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"flex justify-end\">\r\n          <Button\r\n            variant=\"danger\"\r\n            size=\"sm\"\r\n            onClick={() => onRemove(index)}\r\n          >\r\n            Remove Card\r\n          </Button>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n});\r\n\r\nFlashcardItem.displayName = 'FlashcardItem';\r\n\r\nexport default function TextProcessorPage() {\r\n  const navigate = useNavigate();\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [processedCards, setProcessedCards] = useState<ProcessedFlashcard[]>([]);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [step, setStep] = useState<'input' | 'review'>('input');\r\n  const [saveSuccess, setSaveSuccess] = useState(false);\r\n  \r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    watch,\r\n    formState: { errors, isValid, isDirty },\r\n  } = useForm<TextProcessFormValues>({\r\n    resolver: zodResolver(textProcessSchema),\r\n    defaultValues: {\r\n      title: '',\r\n      content: '',\r\n      maxCards: 20,\r\n      includeImages: false,\r\n      includeExamples: true,\r\n    },\r\n    mode: 'onChange',\r\n  });\r\n\r\n  const watchContent = watch('content');\r\n  const watchTitle = watch('title');\r\n  \r\n  // Memoize expensive computations\r\n  const wordCount = useMemo(() => {\r\n    return watchContent ? watchContent.trim().split(/\\s+/).filter(Boolean).length : 0;\r\n  }, [watchContent]);\r\n\r\n  const onSubmit = async (data: TextProcessFormValues) => {\r\n    setIsProcessing(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const result = await processorService.processText({\r\n        title: data.title,\r\n        content: data.content,\r\n        maxCards: data.maxCards,\r\n        includeImages: data.includeImages,\r\n        includeExamples: data.includeExamples,\r\n      });\r\n      \r\n      setProcessedCards(result.cards);\r\n      setStep('review');\r\n    } catch (err) {\r\n      setError('Failed to process text. Please try again.');\r\n      console.error(err);\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  const handleSaveFlashcards = async () => {\r\n    if (processedCards.length === 0) {\r\n      setError('No flashcards to save.');\r\n      return;\r\n    }\r\n    \r\n    setIsProcessing(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const title = watchTitle;\r\n      const newSetId = await flashcardService.createSet({\r\n        title,\r\n        description: `Generated from text processing on ${new Date().toLocaleDateString()}`,\r\n        cards: processedCards.map(card => ({\r\n          front: card.question,\r\n          back: card.answer,\r\n          imageUrl: card.imageUrl || null,\r\n        })),\r\n      });\r\n      \r\n      setSaveSuccess(true);\r\n      \r\n      // Navigate after a brief delay to show success message\r\n      setTimeout(() => {\r\n        navigate(`/flashcards/${newSetId}`);\r\n      }, 1500);\r\n    } catch (err) {\r\n      setError('Failed to save flashcards. Please try again.');\r\n      console.error(err);\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  // Memoize handlers to prevent unnecessary re-renders\r\n  const handleEditCard = useCallback((index: number, field: 'question' | 'answer', value: string) => {\r\n    setProcessedCards(prevCards => {\r\n      const updatedCards = [...prevCards];\r\n      updatedCards[index] = {\r\n        ...updatedCards[index],\r\n        [field]: value,\r\n      };\r\n      return updatedCards;\r\n    });\r\n  }, []);\r\n\r\n  const handleRemoveCard = useCallback((index: number) => {\r\n    setProcessedCards(prevCards => prevCards.filter((_, i) => i !== index));\r\n  }, []);\r\n\r\n  const handleBackToInput = () => {\r\n    setStep('input');\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <div className=\"mb-8 flex flex-col sm:flex-row sm:items-center sm:justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-neutral-900\">Text Processor</h1>\r\n          <p className=\"mt-2 text-neutral-600\">\r\n            Transform your text content into flashcards for more effective learning.\r\n          </p>\r\n        </div>\r\n        {step === 'review' && (\r\n          <div className=\"mt-4 sm:mt-0\">\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={handleBackToInput}\r\n              className=\"mr-2\"\r\n            >\r\n              Back to Input\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"mb-6 rounded-lg border border-red-200 bg-red-50 p-4 text-red-700\" role=\"alert\">\r\n          {error}\r\n        </div>\r\n      )}\r\n      \r\n      {saveSuccess && (\r\n        <div className=\"mb-6 rounded-lg border border-green-200 bg-green-50 p-4 text-green-700\" role=\"status\">\r\n          Flashcards saved successfully! Redirecting...\r\n        </div>\r\n      )}\r\n\r\n      {step === 'input' ? (\r\n        <Card>\r\n          <CardContent className=\"p-6\">\r\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\r\n              <div>\r\n                <label htmlFor=\"title\" className=\"block text-sm font-medium text-neutral-700\">\r\n                  Set Title\r\n                </label>\r\n                <input\r\n                  id=\"title\"\r\n                  type=\"text\"\r\n                  className={`mt-1 block w-full rounded-md border ${\r\n                    errors.title ? 'border-red-300' : 'border-neutral-300'\r\n                  } px-3 py-2 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-primary-500 sm:text-sm`}\r\n                  placeholder=\"Enter a title for your flashcard set\"\r\n                  aria-invalid={errors.title ? 'true' : 'false'}\r\n                  aria-describedby={errors.title ? 'title-error' : undefined}\r\n                  {...register('title')}\r\n                />\r\n                {errors.title && (\r\n                  <FormFeedback \r\n                    id=\"title-error\" \r\n                    message={errors.title.message || 'Title is required'} \r\n                    type=\"error\" \r\n                  />\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <label htmlFor=\"content\" className=\"block text-sm font-medium text-neutral-700\">\r\n                  Text Content\r\n                </label>\r\n                <div className=\"mt-1 flex rounded-md shadow-sm\">\r\n                  <textarea\r\n                    id=\"content\"\r\n                    rows={12}\r\n                    className={`block w-full rounded-md border ${\r\n                      errors.content ? 'border-red-300' : 'border-neutral-300'\r\n                    } px-3 py-2 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-primary-500 sm:text-sm`}\r\n                    placeholder=\"Paste or type your text content here\"\r\n                    aria-invalid={errors.content ? 'true' : 'false'}\r\n                    aria-describedby={errors.content ? 'content-error' : 'content-help'}\r\n                    {...register('content')}\r\n                  ></textarea>\r\n                </div>\r\n                <div className=\"mt-1 flex flex-col sm:flex-row sm:justify-between\">\r\n                  <p id=\"content-help\" className=\"text-xs text-neutral-500\">\r\n                    Word count: {wordCount}\r\n                  </p>\r\n                  {errors.content && (\r\n                    <FormFeedback \r\n                      id=\"content-error\" \r\n                      message={errors.content.message || 'Content is required'} \r\n                      type=\"error\" \r\n                    />\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\r\n                <div>\r\n                  <label htmlFor=\"maxCards\" className=\"block text-sm font-medium text-neutral-700\">\r\n                    Maximum Cards\r\n                  </label>\r\n                  <input\r\n                    id=\"maxCards\"\r\n                    type=\"number\"\r\n                    min=\"5\"\r\n                    max=\"100\"\r\n                    className={`mt-1 block w-full rounded-md border ${\r\n                      errors.maxCards ? 'border-red-300' : 'border-neutral-300'\r\n                    } px-3 py-2 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-primary-500 sm:text-sm`}\r\n                    aria-invalid={errors.maxCards ? 'true' : 'false'}\r\n                    aria-describedby={errors.maxCards ? 'maxCards-error' : undefined}\r\n                    {...register('maxCards', { valueAsNumber: true })}\r\n                  />\r\n                  {errors.maxCards && (\r\n                    <FormFeedback \r\n                      id=\"maxCards-error\" \r\n                      message={errors.maxCards.message || 'Invalid value'} \r\n                      type=\"error\" \r\n                    />\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex items-center\">\r\n                    <input\r\n                      id=\"includeImages\"\r\n                      type=\"checkbox\"\r\n                      className=\"h-4 w-4 rounded border-neutral-300 text-primary-600 focus:ring-primary-500\"\r\n                      {...register('includeImages')}\r\n                    />\r\n                    <label htmlFor=\"includeImages\" className=\"ml-2 block text-sm text-neutral-700\">\r\n                      Include relevant images (when available)\r\n                    </label>\r\n                  </div>\r\n                  <div className=\"flex items-center\">\r\n                    <input\r\n                      id=\"includeExamples\"\r\n                      type=\"checkbox\"\r\n                      className=\"h-4 w-4 rounded border-neutral-300 text-primary-600 focus:ring-primary-500\"\r\n                      {...register('includeExamples')}\r\n                    />\r\n                    <label htmlFor=\"includeExamples\" className=\"ml-2 block text-sm text-neutral-700\">\r\n                      Include examples in answers\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex justify-end\">\r\n                <Button\r\n                  type=\"submit\"\r\n                  isLoading={isProcessing}\r\n                  disabled={isProcessing || !isDirty || !isValid}\r\n                >\r\n                  Generate Flashcards\r\n                </Button>\r\n              </div>\r\n            </form>\r\n          </CardContent>\r\n        </Card>\r\n      ) : (\r\n        <div>\r\n          <div className=\"mb-6 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\r\n            <h2 className=\"text-2xl font-bold text-neutral-900\">Review Generated Flashcards</h2>\r\n            <div className=\"flex gap-2\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={handleBackToInput}\r\n              >\r\n                Back to Input\r\n              </Button>\r\n              <Button\r\n                onClick={handleSaveFlashcards}\r\n                isLoading={isProcessing}\r\n                disabled={isProcessing || processedCards.length === 0}\r\n              >\r\n                Save Flashcards\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n          {isProcessing ? (\r\n            // Loading skeleton for cards\r\n            <div className=\"space-y-4\">\r\n              {[...Array(3)].map((_, i) => (\r\n                <div key={i} className=\"rounded-lg border border-neutral-200 bg-white p-6\">\r\n                  <div className=\"mb-4\">\r\n                    <Skeleton height={16} width={100} className=\"mb-2\" />\r\n                    <Skeleton height={48} />\r\n                  </div>\r\n                  <div className=\"mb-4\">\r\n                    <Skeleton height={16} width={80} className=\"mb-2\" />\r\n                    <Skeleton height={72} />\r\n                  </div>\r\n                  <div className=\"flex justify-end\">\r\n                    <Skeleton height={32} width={120} />\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : processedCards.length > 0 ? (\r\n            <div>\r\n              <p className=\"mb-4 text-neutral-600\">\r\n                {processedCards.length} flashcards were generated. You can edit them before saving.\r\n              </p>\r\n              \r\n              {processedCards.map((card, index) => (\r\n                <FlashcardItem\r\n                  key={index}\r\n                  card={card}\r\n                  index={index}\r\n                  onEdit={handleEditCard}\r\n                  onRemove={handleRemoveCard}\r\n                />\r\n              ))}\r\n              \r\n              <div className=\"mt-6 flex justify-end\">\r\n                <Button\r\n                  onClick={handleSaveFlashcards}\r\n                  isLoading={isProcessing}\r\n                  disabled={isProcessing || processedCards.length === 0}\r\n                >\r\n                  Save Flashcards\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"rounded-lg border border-neutral-200 bg-neutral-50 p-8 text-center\">\r\n              <h3 className=\"mb-2 text-lg font-medium text-neutral-900\">No flashcards generated</h3>\r\n              <p className=\"mb-6 text-neutral-600\">\r\n                Try adjusting your text content and settings to generate flashcards.\r\n              </p>\r\n              <Button onClick={handleBackToInput}>Back to Input</Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} "],"names":["FormFeedback","message","type","id","className","icon","typeStyles","iconMap","jsx","jsxs","cn","FormFeedback$1","Skeleton","width","height","animate","radius","circle","props","getSize","size","textProcessSchema","z","FlashcardItem","React","card","index","onEdit","onRemove","Card","CardContent","e","Button","TextProcessorPage","navigate","useNavigate","isProcessing","setIsProcessing","useState","processedCards","setProcessedCards","error","setError","step","setStep","saveSuccess","setSaveSuccess","register","handleSubmit","watch","errors","isValid","isDirty","useForm","zodResolver","watchContent","watchTitle","wordCount","useMemo","onSubmit","data","result","processorService","err","handleSaveFlashcards","title","newSetId","flashcardService","handleEditCard","useCallback","field","value","prevCards","updatedCards","handleRemoveCard","_","i","handleBackToInput"],"mappings":"8TAcO,MAAMA,EAA4C,CAAC,CACxD,QAAAC,EACA,KAAAC,EAAO,OACP,GAAAC,EACA,UAAAC,EACA,KAAAC,EAAO,EACT,IAAM,CACJ,MAAMC,EAAa,CACjB,MAAO,eACP,QAAS,iBACT,KAAM,gBACN,QAAS,gBAAA,EAGLC,EAAU,CACd,MACEC,EAAA,IAAC,MAAA,CACC,MAAM,6BACN,QAAQ,YACR,KAAK,eACL,UAAU,+BACV,cAAY,OAEZ,SAAAA,EAAA,IAAC,OAAA,CACC,SAAS,UACT,EAAE,gNACF,SAAS,SAAA,CACX,CAAA,CACF,EAEF,QACEA,EAAA,IAAC,MAAA,CACC,MAAM,6BACN,QAAQ,YACR,KAAK,eACL,UAAU,+BACV,cAAY,OAEZ,SAAAA,EAAA,IAAC,OAAA,CACC,SAAS,UACT,EAAE,yJACF,SAAS,SAAA,CACX,CAAA,CACF,EAEF,KACEA,EAAA,IAAC,MAAA,CACC,MAAM,6BACN,QAAQ,YACR,KAAK,eACL,UAAU,+BACV,cAAY,OAEZ,SAAAA,EAAA,IAAC,OAAA,CACC,SAAS,UACT,EAAE,0OACF,SAAS,SAAA,CACX,CAAA,CACF,EAEF,QACEA,EAAA,IAAC,MAAA,CACC,MAAM,6BACN,QAAQ,YACR,KAAK,eACL,UAAU,+BACV,cAAY,OAEZ,SAAAA,EAAA,IAAC,OAAA,CACC,SAAS,UACT,EAAE,6OACF,SAAS,SAAA,CACX,CAAA,CACF,CAAA,EAKF,OAAAC,EAAA,KAAC,IAAA,CACC,GAAAN,EACA,UAAWO,EACT,mCACAJ,EAAWJ,CAAI,EACfE,CACF,EACA,KAAMF,IAAS,QAAU,QAAU,SAElC,SAAA,CAAAG,GAAQE,EAAQL,CAAI,EACpBD,CAAA,CAAA,CAAA,CAGP,EAEAU,EAAeX,ECrEFY,EAAoC,CAAC,CAChD,UAAAR,EACA,MAAAS,EAAQ,OACR,OAAAC,EAAS,OACT,QAAAC,EAAU,GACV,OAAAC,EAAS,UACT,OAAAC,EAAS,GACT,GAAGC,CACL,IAAM,CACE,MAAAC,EAAWC,GACf,OAAOA,GAAS,SAAW,GAAGA,CAAI,KAAOA,EAGzC,OAAAZ,EAAA,IAAC,MAAA,CACC,UAAWE,EACT,iBACAK,GAAW,gBACXX,CACF,EACA,MAAO,CACL,MAAOe,EAAQN,CAAK,EACpB,OAAQM,EAAQL,CAAM,EACtB,aAAcG,EAAS,MAAQE,EAAQH,CAAM,CAC/C,EACA,cAAY,OACX,GAAGE,CAAA,CAAA,CAGV,ECpDMG,EAAoBC,EAAE,OAAO,CACjC,MAAOA,EAAE,OAAA,EAAS,IAAI,EAAG,mBAAmB,EAC5C,QAASA,EAAE,OAAA,EAAS,IAAI,GAAI,0CAA0C,EACtE,SAAUA,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAG,0BAA0B,EAAE,IAAI,IAAK,2BAA2B,EAClG,cAAeA,EAAE,UAAU,QAAQ,EAAK,EACxC,gBAAiBA,EAAE,UAAU,QAAQ,EAAI,CAC3C,CAAC,EAKKC,EAAgBC,EAAM,KAAK,CAAC,CAChC,KAAAC,EACA,MAAAC,EACA,OAAAC,EACA,SAAAC,CACF,UAOKC,EAAiB,CAAA,UAAU,OAC1B,SAACpB,EAAA,KAAAqB,EAAA,CAAY,UAAU,MACrB,SAAA,CAACrB,EAAAA,KAAA,MAAA,CAAI,UAAU,OACb,SAAA,CAAAD,EAAAA,IAAC,SAAM,QAAS,YAAYkB,CAAK,GAAI,UAAU,kDAAkD,SAEjG,UAAA,CAAA,EACAlB,EAAA,IAAC,WAAA,CACC,GAAI,YAAYkB,CAAK,GACrB,KAAM,EACN,UAAU,sJACV,MAAOD,EAAK,SACZ,SAAWM,GAAMJ,EAAOD,EAAO,WAAYK,EAAE,OAAO,KAAK,CAAA,CAC3D,CAAA,EACF,EAEAtB,EAAAA,KAAC,MAAI,CAAA,UAAU,OACb,SAAA,CAAAD,EAAAA,IAAC,SAAM,QAAS,UAAUkB,CAAK,GAAI,UAAU,kDAAkD,SAE/F,QAAA,CAAA,EACAlB,EAAA,IAAC,WAAA,CACC,GAAI,UAAUkB,CAAK,GACnB,KAAM,EACN,UAAU,sJACV,MAAOD,EAAK,OACZ,SAAWM,GAAMJ,EAAOD,EAAO,SAAUK,EAAE,OAAO,KAAK,CAAA,CACzD,CAAA,EACF,EAECN,EAAK,UACHhB,OAAA,MAAA,CAAI,UAAU,OACb,SAAA,CAACD,EAAA,IAAA,IAAA,CAAE,UAAU,kDAAkD,SAAK,QAAA,EACpEA,EAAA,IAAC,MAAA,CACC,IAAKiB,EAAK,SACV,IAAI,uBACJ,UAAU,gDACV,QAAQ,MAAA,CACV,CAAA,EACF,EAGFjB,EAAAA,IAAC,MAAI,CAAA,UAAU,mBACb,SAAAA,EAAA,IAACwB,EAAA,CACC,QAAQ,SACR,KAAK,KACL,QAAS,IAAMJ,EAASF,CAAK,EAC9B,SAAA,aAAA,CAAA,EAGH,CAAA,EACF,GAjDSA,CAkDX,CAEH,EAEDH,EAAc,YAAc,gBAE5B,SAAwBU,IAAoB,CAC1C,MAAMC,EAAWC,IACX,CAACC,EAAcC,CAAe,EAAIC,WAAS,EAAK,EAChD,CAACC,EAAgBC,CAAiB,EAAIF,EAAA,SAA+B,CAAE,CAAA,EACvE,CAACG,EAAOC,CAAQ,EAAIJ,WAAwB,IAAI,EAChD,CAACK,EAAMC,CAAO,EAAIN,WAA6B,OAAO,EACtD,CAACO,EAAaC,CAAc,EAAIR,WAAS,EAAK,EAE9C,CACJ,SAAAS,EACA,aAAAC,EACA,MAAAC,EACA,UAAW,CAAE,OAAAC,EAAQ,QAAAC,EAAS,QAAAC,CAAQ,GACpCC,EAA+B,CACjC,SAAUC,EAAYjC,CAAiB,EACvC,cAAe,CACb,MAAO,GACP,QAAS,GACT,SAAU,GACV,cAAe,GACf,gBAAiB,EACnB,EACA,KAAM,UAAA,CACP,EAEKkC,EAAeN,EAAM,SAAS,EAC9BO,EAAaP,EAAM,OAAO,EAG1BQ,EAAYC,EAAAA,QAAQ,IACjBH,EAAeA,EAAa,KAAA,EAAO,MAAM,KAAK,EAAE,OAAO,OAAO,EAAE,OAAS,EAC/E,CAACA,CAAY,CAAC,EAEXI,EAAW,MAAOC,GAAgC,CACtDvB,EAAgB,EAAI,EACpBK,EAAS,IAAI,EAET,GAAA,CACI,MAAAmB,EAAS,MAAMC,EAAiB,YAAY,CAChD,MAAOF,EAAK,MACZ,QAASA,EAAK,QACd,SAAUA,EAAK,SACf,cAAeA,EAAK,cACpB,gBAAiBA,EAAK,eAAA,CACvB,EAEDpB,EAAkBqB,EAAO,KAAK,EAC9BjB,EAAQ,QAAQ,QACTmB,EAAK,CACZrB,EAAS,2CAA2C,EACpD,QAAQ,MAAMqB,CAAG,CAAA,QACjB,CACA1B,EAAgB,EAAK,CACvB,CAAA,EAGI2B,EAAuB,SAAY,CACnC,GAAAzB,EAAe,SAAW,EAAG,CAC/BG,EAAS,wBAAwB,EACjC,MACF,CAEAL,EAAgB,EAAI,EACpBK,EAAS,IAAI,EAET,GAAA,CACF,MAAMuB,EAAQT,EACRU,EAAW,MAAMC,EAAiB,UAAU,CAChD,MAAAF,EACA,YAAa,qCAAqC,IAAI,KAAK,EAAE,oBAAoB,GACjF,MAAO1B,EAAe,IAAad,IAAA,CACjC,MAAOA,EAAK,SACZ,KAAMA,EAAK,OACX,SAAUA,EAAK,UAAY,IAAA,EAC3B,CAAA,CACH,EAEDqB,EAAe,EAAI,EAGnB,WAAW,IAAM,CACNZ,EAAA,eAAegC,CAAQ,EAAE,GACjC,IAAI,QACAH,EAAK,CACZrB,EAAS,8CAA8C,EACvD,QAAQ,MAAMqB,CAAG,CAAA,QACjB,CACA1B,EAAgB,EAAK,CACvB,CAAA,EAII+B,EAAiBC,EAAA,YAAY,CAAC3C,EAAe4C,EAA8BC,IAAkB,CACjG/B,EAA+BgC,GAAA,CACvB,MAAAC,EAAe,CAAC,GAAGD,CAAS,EAClC,OAAAC,EAAa/C,CAAK,EAAI,CACpB,GAAG+C,EAAa/C,CAAK,EACrB,CAAC4C,CAAK,EAAGC,CAAA,EAEJE,CAAA,CACR,CACH,EAAG,CAAE,CAAA,EAECC,EAAmBL,cAAa3C,GAAkB,CACpCc,EAAAgC,GAAaA,EAAU,OAAO,CAACG,EAAGC,IAAMA,IAAMlD,CAAK,CAAC,CACxE,EAAG,CAAE,CAAA,EAECmD,EAAoB,IAAM,CAC9BjC,EAAQ,OAAO,CAAA,EAIf,OAAAnC,EAAA,KAAC,MAAI,CAAA,UAAU,8BACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,oEACb,SAAA,CAAAA,OAAC,MACC,CAAA,SAAA,CAACD,EAAA,IAAA,KAAA,CAAG,UAAU,sCAAsC,SAAc,iBAAA,EACjEA,EAAA,IAAA,IAAA,CAAE,UAAU,wBAAwB,SAErC,2EAAA,CAAA,EACF,EACCmC,IAAS,UACPnC,MAAA,MAAA,CAAI,UAAU,eACb,SAAAA,EAAA,IAACwB,EAAA,CACC,QAAQ,UACR,QAAS6C,EACT,UAAU,OACX,SAAA,eAAA,CAAA,EAGH,CAAA,EAEJ,EAECpC,GACEjC,EAAAA,IAAA,MAAA,CAAI,UAAU,mEAAmE,KAAK,QACpF,SACHiC,EAAA,EAGDI,GACErC,EAAAA,IAAA,MAAA,CAAI,UAAU,yEAAyE,KAAK,SAAS,SAEtG,gDAAA,EAGDmC,IAAS,QACPnC,EAAAA,IAAAqB,EAAA,CACC,eAACC,EAAY,CAAA,UAAU,MACrB,SAAArB,EAAA,KAAC,QAAK,SAAUuC,EAAaW,CAAQ,EAAG,UAAU,YAChD,SAAA,CAAAlD,OAAC,MACC,CAAA,SAAA,CAAAD,MAAC,QAAM,CAAA,QAAQ,QAAQ,UAAU,6CAA6C,SAE9E,YAAA,EACAA,EAAA,IAAC,QAAA,CACC,GAAG,QACH,KAAK,OACL,UAAW,uCACT0C,EAAO,MAAQ,iBAAmB,oBACpC,qGACA,YAAY,uCACZ,eAAcA,EAAO,MAAQ,OAAS,QACtC,mBAAkBA,EAAO,MAAQ,cAAgB,OAChD,GAAGH,EAAS,OAAO,CAAA,CACtB,EACCG,EAAO,OACN1C,EAAA,IAACR,EAAA,CACC,GAAG,cACH,QAASkD,EAAO,MAAM,SAAW,oBACjC,KAAK,OAAA,CACP,CAAA,EAEJ,SAEC,MACC,CAAA,SAAA,CAAA1C,MAAC,QAAM,CAAA,QAAQ,UAAU,UAAU,6CAA6C,SAEhF,eAAA,EACAA,EAAAA,IAAC,MAAI,CAAA,UAAU,iCACb,SAAAA,EAAA,IAAC,WAAA,CACC,GAAG,UACH,KAAM,GACN,UAAW,kCACT0C,EAAO,QAAU,iBAAmB,oBACtC,qGACA,YAAY,uCACZ,eAAcA,EAAO,QAAU,OAAS,QACxC,mBAAkBA,EAAO,QAAU,gBAAkB,eACpD,GAAGH,EAAS,SAAS,CAAA,CAAA,EAE1B,EACAtC,EAAAA,KAAC,MAAI,CAAA,UAAU,oDACb,SAAA,CAAAA,EAAA,KAAC,IAAE,CAAA,GAAG,eAAe,UAAU,2BAA2B,SAAA,CAAA,eAC3CgD,CAAA,EACf,EACCP,EAAO,SACN1C,EAAA,IAACR,EAAA,CACC,GAAG,gBACH,QAASkD,EAAO,QAAQ,SAAW,sBACnC,KAAK,OAAA,CACP,CAAA,EAEJ,CAAA,EACF,EAEAzC,EAAAA,KAAC,MAAI,CAAA,UAAU,wCACb,SAAA,CAAAA,OAAC,MACC,CAAA,SAAA,CAAAD,MAAC,QAAM,CAAA,QAAQ,WAAW,UAAU,6CAA6C,SAEjF,gBAAA,EACAA,EAAA,IAAC,QAAA,CACC,GAAG,WACH,KAAK,SACL,IAAI,IACJ,IAAI,MACJ,UAAW,uCACT0C,EAAO,SAAW,iBAAmB,oBACvC,qGACA,eAAcA,EAAO,SAAW,OAAS,QACzC,mBAAkBA,EAAO,SAAW,iBAAmB,OACtD,GAAGH,EAAS,WAAY,CAAE,cAAe,GAAM,CAAA,CAClD,EACCG,EAAO,UACN1C,EAAA,IAACR,EAAA,CACC,GAAG,iBACH,QAASkD,EAAO,SAAS,SAAW,gBACpC,KAAK,OAAA,CACP,CAAA,EAEJ,EAEAzC,EAAAA,KAAC,MAAI,CAAA,UAAU,YACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,oBACb,SAAA,CAAAD,EAAA,IAAC,QAAA,CACC,GAAG,gBACH,KAAK,WACL,UAAU,6EACT,GAAGuC,EAAS,eAAe,CAAA,CAC9B,QACC,QAAM,CAAA,QAAQ,gBAAgB,UAAU,sCAAsC,SAE/E,2CAAA,CAAA,EACF,EACAtC,EAAAA,KAAC,MAAI,CAAA,UAAU,oBACb,SAAA,CAAAD,EAAA,IAAC,QAAA,CACC,GAAG,kBACH,KAAK,WACL,UAAU,6EACT,GAAGuC,EAAS,iBAAiB,CAAA,CAChC,QACC,QAAM,CAAA,QAAQ,kBAAkB,UAAU,sCAAsC,SAEjF,8BAAA,CAAA,EACF,CAAA,EACF,CAAA,EACF,EAEAvC,EAAAA,IAAC,MAAI,CAAA,UAAU,mBACb,SAAAA,EAAA,IAACwB,EAAA,CACC,KAAK,SACL,UAAWI,EACX,SAAUA,GAAgB,CAACgB,GAAW,CAACD,EACxC,SAAA,qBAAA,CAAA,EAGH,CAAA,CACF,CAAA,CACF,CAAA,CACF,CAAA,EAEA1C,EAAAA,KAAC,MACC,CAAA,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,0EACb,SAAA,CAACD,EAAA,IAAA,KAAA,CAAG,UAAU,sCAAsC,SAA2B,8BAAA,EAC/EC,EAAAA,KAAC,MAAI,CAAA,UAAU,aACb,SAAA,CAAAD,EAAA,IAACwB,EAAA,CACC,QAAQ,UACR,QAAS6C,EACV,SAAA,eAAA,CAED,EACArE,EAAA,IAACwB,EAAA,CACC,QAASgC,EACT,UAAW5B,EACX,SAAUA,GAAgBG,EAAe,SAAW,EACrD,SAAA,iBAAA,CAED,CAAA,EACF,CAAA,EACF,EAECH,QAEE,MAAI,CAAA,UAAU,YACZ,SAAA,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,IAAI,CAACuC,EAAGC,IACpBnE,EAAA,KAAA,MAAA,CAAY,UAAU,oDACrB,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,OACb,SAAA,CAAAD,MAACI,GAAS,OAAQ,GAAI,MAAO,IAAK,UAAU,OAAO,EACnDJ,EAAAA,IAACI,EAAS,CAAA,OAAQ,EAAI,CAAA,CAAA,EACxB,EACAH,EAAAA,KAAC,MAAI,CAAA,UAAU,OACb,SAAA,CAAAD,MAACI,GAAS,OAAQ,GAAI,MAAO,GAAI,UAAU,OAAO,EAClDJ,EAAAA,IAACI,EAAS,CAAA,OAAQ,EAAI,CAAA,CAAA,EACxB,EACAJ,EAAAA,IAAC,MAAI,CAAA,UAAU,mBACb,SAAAA,EAAA,IAACI,GAAS,OAAQ,GAAI,MAAO,GAAA,CAAK,CACpC,CAAA,CAAA,GAXQgE,CAYV,CACD,EACH,EACErC,EAAe,OAAS,EAC1B9B,EAAA,KAAC,MACC,CAAA,SAAA,CAACA,EAAAA,KAAA,IAAA,CAAE,UAAU,wBACV,SAAA,CAAe8B,EAAA,OAAO,8DAAA,EACzB,EAECA,EAAe,IAAI,CAACd,EAAMC,IACzBlB,EAAA,IAACe,EAAA,CAEC,KAAAE,EACA,MAAAC,EACA,OAAQ0C,EACR,SAAUM,CAAA,EAJLhD,CAAA,CAMR,EAEDlB,EAAAA,IAAC,MAAI,CAAA,UAAU,wBACb,SAAAA,EAAA,IAACwB,EAAA,CACC,QAASgC,EACT,UAAW5B,EACX,SAAUA,GAAgBG,EAAe,SAAW,EACrD,SAAA,iBAAA,CAAA,EAGH,CAAA,CACF,CAAA,EAEA9B,EAAAA,KAAC,MAAI,CAAA,UAAU,qEACb,SAAA,CAACD,EAAA,IAAA,KAAA,CAAG,UAAU,4CAA4C,SAAuB,0BAAA,EAChFA,EAAA,IAAA,IAAA,CAAE,UAAU,wBAAwB,SAErC,uEAAA,EACCA,EAAA,IAAAwB,EAAA,CAAO,QAAS6C,EAAmB,SAAa,gBAAA,CAAA,EACnD,CAAA,EAEJ,CAEJ,CAAA,CAAA,CAEJ"}